{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPb1fqxVoRfmz5S8h61wgL3"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"bYkCqVcb9nWV"},"outputs":[],"source":["import torch\n","from torch import nn\n","import numpy as np"]},{"cell_type":"code","source":["#データを定義します。\n","xor_input = torch.tensor([[1, 1],\n","                [1, 0],\n","                [0, 1],\n","                [0, 0]], device=torch.device('cuda')).float()\n","xor_output = torch.tensor([[0], \n","                           [1], \n","                           [1], \n","                           [0]], device=torch.device('cuda')).float() "],"metadata":{"id":"i5kmO2cO919L"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#pytorchのnn.Moduleクラスを継承して、その中にあるメソッドを使っていきます.\n","#https://pytorch.org/docs/stable/nn.html\n","\n","class NeuralNetwork(nn.Module):\n","\n","    #中間層と出力層を定義します.\n","    def __init__(self):\n","        super(NeuralNetwork, self).__init__()\n","        self.linear1 = nn.Linear(2, 2)\n","        self.activate1 = nn.Sigmoid()\n","        self.linear2 = nn.Linear(2, 1)\n","        self.output = nn.Sigmoid()\n","\n","    #順伝播を定義します.\n","    def forward(self, x):\n","        x = self.linear1(x)\n","        x = self.activate1(x)\n","        x = self.linear2(x)\n","        x = self.output(x)\n","        return x\n","\n","model = NeuralNetwork()\n","model = model.to(\"cuda\")\n","\n","print('The model:')\n","print(model(xor_input))\n","\n","print('\\n\\nModel params:')\n","for param in model.parameters():\n","    print(param)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZufmCJ3d-CCX","executionInfo":{"status":"ok","timestamp":1657853229932,"user_tz":-540,"elapsed":269,"user":{"displayName":"Yamato Sakurai","userId":"17465261927736368743"}},"outputId":"7721976d-7fc4-48e8-e6f7-46a469b423e8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The model:\n","tensor([[0.3462],\n","        [0.3463],\n","        [0.3439],\n","        [0.3442]], device='cuda:0', grad_fn=<SigmoidBackward0>)\n","\n","\n","Model params:\n","Parameter containing:\n","tensor([[ 0.6897, -0.0669],\n","        [-0.0316,  0.0040]], device='cuda:0', requires_grad=True)\n","Parameter containing:\n","tensor([0.3824, 0.6697], device='cuda:0', requires_grad=True)\n","Parameter containing:\n","tensor([[ 0.0604, -0.0767]], device='cuda:0', requires_grad=True)\n","Parameter containing:\n","tensor([-0.6300], device='cuda:0', requires_grad=True)\n"]}]},{"cell_type":"code","source":["device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n","print(f\"Using {device} device\")"],"metadata":{"id":"07cwNset-hqA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#学習回数を決めます\n","epochs = 100000\n","\n","#誤差関数を定義します\n","\n","#loss_fn = nn.BCELoss()\n","loss_fn = nn.MSELoss()\n","\n","#最適化の手法を定義します\n","optimizer = torch.optim.SGD(model.parameters(), lr=0.01, momentum=0.9)\n","\n","#学習開始\n","for epoch in range(epochs):\n","    #勾配を初期化\n","    optimizer.zero_grad()\n","\n","    #順伝播\n","    outputs = model(xor_input)\n","\n","    #誤差を計算\n","    loss = loss_fn(outputs, xor_output)\n","\n","    #誤差を逆伝播\n","    loss.backward()\n","\n","    #重みを修正\n","    optimizer.step()\n","\n","print(\"done\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jbS9bA6vFYUP","executionInfo":{"status":"ok","timestamp":1657853679279,"user_tz":-540,"elapsed":79478,"user":{"displayName":"Yamato Sakurai","userId":"17465261927736368743"}},"outputId":"f3c56562-75f9-41a1-cb1f-8b1a864ee142"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["done\n"]}]},{"cell_type":"code","source":["print(model)\n","print('\\n\\nModel params:')\n","for param in model.parameters():\n","    print(param)\n","\n","print(model(xor_input))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9cmAdWjaNSVp","executionInfo":{"status":"ok","timestamp":1657853745778,"user_tz":-540,"elapsed":265,"user":{"displayName":"Yamato Sakurai","userId":"17465261927736368743"}},"outputId":"1635fec9-28b6-4d40-9232-27a54c6603bf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["NeuralNetwork(\n","  (linear1): Linear(in_features=2, out_features=2, bias=True)\n","  (activate1): Sigmoid()\n","  (linear2): Linear(in_features=2, out_features=1, bias=True)\n","  (output): Sigmoid()\n",")\n","\n","\n","Model params:\n","Parameter containing:\n","tensor([[6.5272, 6.5300],\n","        [4.5384, 4.5390]], device='cuda:0', requires_grad=True)\n","Parameter containing:\n","tensor([-2.9012, -6.9657], device='cuda:0', requires_grad=True)\n","Parameter containing:\n","tensor([[  9.5430, -10.2763]], device='cuda:0', requires_grad=True)\n","Parameter containing:\n","tensor([-4.4002], device='cuda:0', requires_grad=True)\n","tensor([[0.0176],\n","        [0.9831],\n","        [0.9831],\n","        [0.0196]], device='cuda:0', grad_fn=<SigmoidBackward0>)\n"]}]}]}